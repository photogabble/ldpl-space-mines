# Space Mines
# Ported from BASIC to LDPL by Simon Dann in 2019
# Originally authored by Daniel Isaaman and Jenny Tyler in 1982

DATA:
game/year is number

game/numMines is number
game/numPeople is number
game/money is number
game/food is number
game/foodPrice is number
game/oreProduction is number
game/oreStorage is number
game/satisfaction is number
game/minePrice is number
game/orePrice is number

scratch/r is number
scratch/i is number
scratch/n is number
scratch/s is number

rand/min is number
rand/max is number
rand/r is number
rand/result is number

collect/i is number

PROCEDURE:

##
# Random number generator
# set rand/min for minimum value
# set rand/max for maximum value
# get rand/result for resulting random value
##
sub-procedure roll-random-dice
        get random in rand/r
	in rand/result solve rand/max - rand/min
	in rand/result solve rand/r * rand/result
	in rand/result solve rand/result + rand/min
end sub-procedure

##
# Generate Mine Price
##
sub-procedure roll-mine-price
	store 2000 in rand/min
	store 4000 in rand/max
	call sub-procedure roll-random-dice
	store rand/result in game/minePrice
	floor game/minePrice
end sub-procedure

##
# Generate Ore Price
##
sub-procedure roll-ore-price
	store 7 in rand/min
	store 12 in rand/max
	call sub-procedure roll-random-dice
	store rand/result in game/orePrice
	floor game/orePrice
end sub-procedure

##
# Initiate Game Variables
##
sub-procedure setup-game
	store 1 in game/year
	store 0 in game/oreStorage
	store 1 in game/satisfaction

	store 3 in rand/min
	store 6 in rand/max
	call sub-procedure roll-random-dice
	store rand/result in game/numMines
	floor game/numMines

	store 40 in rand/min
	store 60 in rand/max
	call sub-procedure roll-random-dice
        store rand/result in game/numPeople
	floor game/numPeople

	store 10 in rand/min
	store 50 in rand/max
	call sub-procedure roll-random-dice
        store rand/result in game/money
	in game/money solve game/money * game/numPeople
	floor game/money

	store 40 in rand/min
	store 80 in rand/max
	call sub-procedure roll-random-dice
        store rand/result in game/foodPrice
	floor game/foodPrice

	call sub-procedure roll-random-dice
        store rand/result in game/oreProduction
	floor game/oreProduction
end sub-procedure

##
# Collect ORE at the end of the game year
# This is called by display-tick and only seperated
# out here for readability.
##
sub-procedure collect-ore
        in collect/i solve game/oreProduction * game/numMines
        in game/oreStorage solve collect/i + game/oreStorage
end sub-procedure

##
# Display stats for the current game year
##
sub-procedure display-tick
	call sub-procedure collect-ore	
	display "==================================================" CRLF
	display "YEAR " game/year ":" CRLF
	display CRLF
	display "There are " game/numPeople " people in the colony." CRLF
	display "You have " game/numMines " mines, and $" game/money CRLF
	display "Satisfaction Factor " game/satisfaction CRLF
	display CRLF
	display "Your mines procuced " game/oreProduction " tons each." CRLF
	display "ORE IN STORE=" game/oreStorage " tons." CRLF
	display "==================================================" CRLF
end sub-procedure

sub-procedure selling
	display CRLF
	display "SELLING" CRLF
	display "Ore selling price: " game/orePrice CRLF
	display "Mine selling price: " game/minePrice "/mine" CRLF

	while 1 is equal to 1 do
		display "How much ore to sell? "
		accept scratch/i
		floor scratch/i

		if scratch/i is equal to 0 then
                        break
                end if

		if scratch/i is greater than 0 then
			if scratch/i is less than or equal to game/oreStorage then
				in scratch/n solve game/orePrice * scratch/i
				floor scratch/n
				in game/money solve game/money + scratch/n
				in game/oreStorage solve game/oreStorage - scratch/i
				break
			end if
		end if
		display "Please enter a number between 1 and " game/oreStorage CRLF
	repeat

	 while 1 is equal to 1 do
                display "How many mines to sell? "
                accept scratch/i
                floor scratch/i

		if scratch/i is equal to 0 then
			break
		end if

                if scratch/i is greater than 0 then
                        if scratch/i is less than or equal to game/numMines then
                                in scratch/n solve game/minePrice * scratch/i
                                floor scratch/n
                                in game/money solve game/money + scratch/n
                                in game/numMines solve game/numMines - scratch/i
                                break
                        end if
                end if
                display "Please enter a number between 1 and " game/numMines CRLF
        repeat
end sub-procedure

sub-procedure buying
	display CRLF "You have $" game/money CRLF CRLF
	display "BUYING" CRLF
	
		while 1 is equal to 1 do
		display "How much to spend on food? $"
		accept scratch/i
                floor scratch/i

		display "Buying $" scratch/i " food" CRLF

		if scratch/i is equal to 0 then
                        break
                end if

		if scratch/i is greater than 0 then
			if scratch/i is less than or equal to game/money then
				in game/money solve game/money - scratch/i
				in scratch/s solve scratch/i / game/numPeople
				if scratch/s is greater than or equal to 120 then
					in game/satisfaction solve 0.1 + game/satisfaction
				end if

				if scratch/s is less than or equal to 89 then
					in game/satisfaction solve game/satisfaction - 0.2
				end if

				break
			end if
			display "You don't have enough money to afford that amount of food." CRLF
		end if
	repeat

	while 1 is equal to 1 do
		display "How many mines to buy? "
		accept scratch/i
		floor scratch/i

		if scratch/i is equal to 0 then
                        break
                end if

		if scratch/i is greater than 0 then
			in scratch/s solve scratch/i * game/minePrice
			floor scratch/s
			if scratch/s is less than or equal to game/money then
				in game/numMines solve scratch/i + game/numMines
				in game/money solve game/money - scratch/s
				break
			end if
			display "That many mines would cost $" scratch/s " you only have $" game/money CRLF
		end if
	repeat

end sub-procedure

call sub-procedure setup-game

##
# Main Game Loop
##
while 1 is equal to 1 do
	call sub-procedure roll-ore-price
	call sub-procedure roll-mine-price

	call sub-procedure display-tick
	call sub-procedure selling
	call sub-procedure buying

	# Depending on satisfaction between 1 and 10 people will join or leave
	store 1 in rand/min
        store 10 in rand/max
        call sub-procedure roll-random-dice
	floor rand/result
	

	# If satisfaction is high, more people arrive
	if game/satisfaction is greater than or equal to 1.1 then
	        in game/numPeople solve rand/result + game/numPeople
	end if

	# People leave if satisfaction is low
	if game/satisfaction is less than 0.9 then
		in game/numPeople		 solve game/numPeople - rand/result
	end if

	# You win the game if you last ten years
        if game/year is equal to 10 then
                display "Hurrah! You survived your term of office." CRLF
                break
        end if

        # If the satifaction is too low then its game over
	if game/satisfaction is less than 0.6 then
		display "The people revolted! Game Over!" CRLF
		break
	end if

	# If there are less than 10 people per mine then its game over
	in scratch/s solve game/numPeople / game/numMines
	if scratch/s is less than 10 then
		display "You have over worked everyone, Game Over!" CRLF
		break
	end if

	# If there are less than 30 people then the game is over
	if game/numPeople is less than 30 then
		display "Not enough people left, Game Over!" CRLF
	end if

	# Introduce a small chance of failure, to make things more "FUN"
	get random in scratch/r	
	if scratch/r is less than 0.1 then
		display "RADIOACTIVE LEAK... MANY DIE!" CRLF
		in game/numPeople solve game/numPeople / 2
		floor game/numPeople
	end if

	in game/year	 solve 1 + game/year
repeat
